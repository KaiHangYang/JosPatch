diff --git a/inc/memlayout.h b/inc/memlayout.h
index d39c587..9036900 100644
--- a/inc/memlayout.h
+++ b/inc/memlayout.h
@@ -17,7 +17,7 @@
 #define GD_KD     0x10     // kernel data
 #define GD_UT     0x18     // user text
 #define GD_UD     0x20     // user data
-#define GD_TSS    0x28     // Task segment selector
+#define GD_TSS    0x28     // Task segment selector (LDT)
 
 /*
  * Virtual memory map:                                Permissions
diff --git a/kern/console.c b/kern/console.c
index 150fe16..e913965 100644
--- a/kern/console.c
+++ b/kern/console.c
@@ -150,7 +150,7 @@ cga_putc(int c)
 	// if no attribute given, then use black on white
 	if (!(c & ~0xFF))
 		c |= 0x0700;
-
+    // change the high bits of the 16bit char can change the display mode
 	switch (c & 0xff) {
 	case '\b':
 		if (crt_pos > 0) {
diff --git a/kern/init.c b/kern/init.c
index 01033c8..281a414 100644
--- a/kern/init.c
+++ b/kern/init.c
@@ -30,11 +30,14 @@ i386_init(void)
 	i386_detect_memory();
 	i386_vm_init();
 
-
-
-
-
-
+    /* My Code */
+    // int x = 1, y = 3, z = 4;
+    // cprintf("x %d, y %x, z %d\n", x, y, z);
+    // unsigned int i = 0x00646c72;
+    // cprintf("H%x Wo%s", 57616, &i);
+    
+    cprintf("x=%d y=%d\n", 3);
+    /* My Code */
 
 	// Drop into the kernel monitor.
 	while (1)
diff --git a/kern/kdebug.c b/kern/kdebug.c
index 89833db..bdf9f9e 100644
--- a/kern/kdebug.c
+++ b/kern/kdebug.c
@@ -179,10 +179,18 @@ debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)
 	// Hint:
 	//	There's a particular stabs type used for line numbers.
 	//	Look at the STABS documentation and <inc/stab.h> to find
-	//	which one.
+	//	which one. N_SLINE
 	// Your code here.
-
-	
+    
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+	if (lline <= rline) {
+        // find the code line 
+        // then get the line num
+        info->eip_line = stabs[lline].n_desc;// n_desc is the N_SLINE 's linenumber
+    }
+    else {
+        return -1; // not found
+    }
 	// Search backwards from the line number for the relevant filename
 	// stab.
 	// We can't just use the "lfile" stab because inlined functions
@@ -199,7 +207,14 @@ debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)
 	// Set eip_fn_narg to the number of arguments taken by the function,
 	// or 0 if there was no containing function.
 	// Your code here.
-
+    while (lfun <= rfun) {
+        // begin to find the PSYM
+        if (stabs[lfun].n_type == N_PSYM) {
+            // this stab entry is argument
+            ++info->eip_fn_narg;
+        }
+        ++lfun;
+    }
 	
 	return 0;
 }
diff --git a/kern/monitor.c b/kern/monitor.c
index 14d8d14..ce93dcf 100644
--- a/kern/monitor.c
+++ b/kern/monitor.c
@@ -24,6 +24,7 @@ struct Command {
 static struct Command commands[] = {
 	{ "help", "Display this list of commands", mon_help },
 	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
+    { "backtrace", "Backtrace the execution", mon_backtrace },
 };
 #define NCOMMANDS (sizeof(commands)/sizeof(commands[0]))
 
@@ -60,6 +61,50 @@ int
 mon_backtrace(int argc, char **argv, struct Trapframe *tf)
 {
 	// Your code here.
+    uint32_t ebp = read_ebp(); //read the ebp of this func
+    uintptr_t eip = read_eip();
+    uintptr_t pre_eip = *((uint32_t *)ebp + 1);
+    
+    cprintf("%x %x\nStack backtrace:\n", ebp, eip); // the output mode is wrong. You can see the vcprintfmt's implementations %0.8x is wrong
+    struct Eipdebuginfo info;
+    char fun_name[100];
+    int i;
+    while (ebp > 0) {
+        if (debuginfo_eip(eip, &info) >= 0) {
+            // success
+            for (i = 0; i < info.eip_fn_namelen; i++) {
+                fun_name[i] = info.eip_fn_name[i];
+            }
+            fun_name[i] = '\0';
+            cprintf("%s:%d:%s:args %d\n", info.eip_file, info.eip_line, fun_name, info.eip_fn_narg);
+        }
+        else {
+            cprintf("Call debuginfo_eip failed!\n");
+        }
+        cprintf("  ebp %08x eip %08x args ", ebp, *((uint32_t *)ebp + 1));
+        switch(info.eip_fn_narg) {
+            case 0:
+                cprintf("NULL\n");
+                break;
+            case 1:
+                cprintf("%08x\n", *((uint32_t *)ebp + 2));
+                break;
+            case 2:
+                cprintf("%08x %08x\n", *((uint32_t *)ebp + 2), *((uint32_t *)ebp + 3));
+                break;
+            case 3:
+                cprintf("%08x %08x %08x\n", *((uint32_t *)ebp + 2), *((uint32_t *)ebp + 3), *((uint32_t *)ebp + 4));
+                break;
+            case 4:
+                cprintf("%08x %08x %08x %08x\n", *((uint32_t *)ebp + 2), *((uint32_t *)ebp + 3), *((uint32_t *)ebp + 4), *((uint32_t *)ebp + 5));
+                break;
+            default:
+                cprintf("%08x %08x %08x %08x %08x\n", *((uint32_t *)ebp + 2), *((uint32_t *)ebp + 3), *((uint32_t *)ebp + 4), *((uint32_t *)ebp + 5), *((uint32_t *)ebp + 6));
+        }
+        ebp = *(uint32_t *)ebp;
+        eip = pre_eip;
+        pre_eip = *((uint32_t *)ebp + 1);
+    }
 	return 0;
 }
 
diff --git a/kern/pmap.c b/kern/pmap.c
index b482f30..5b0f497 100644
--- a/kern/pmap.c
+++ b/kern/pmap.c
@@ -121,8 +121,13 @@ boot_alloc(uint32_t n, uint32_t align)
 	//	Step 2: save current value of boot_freemem as allocated chunk
 	//	Step 3: increase boot_freemem to record allocation
 	//	Step 4: return allocated chunk
-
-	return NULL;
+    // there are useful macros in type.h
+    
+    boot_freemem = ROUNDUP(boot_freemem, align); // saved
+    v = boot_freemem;
+    boot_freemem += ROUNDUP(n, align);
+    
+	return v;
 }
 
 // Set up a two-level page table:
@@ -145,7 +150,7 @@ i386_vm_init(void)
 	size_t n;
 
 	// Delete this line:
-	panic("i386_vm_init: This function is not finished\n");
+	//panic("i386_vm_init: This function is not finished\n");
 
 	//////////////////////////////////////////////////////////////////////
 	// create initial page directory.
@@ -174,7 +179,8 @@ i386_vm_init(void)
 	// programs will get read-only access to the array as well.
 	// You must allocate the array yourself.
 	// Your code goes here: 
-
+    
+    pages = (struct Page *)(boot_alloc(sizeof(struct Page) * npage, PGSIZE));
 
 	//////////////////////////////////////////////////////////////////////
 	// Now that we've allocated the initial kernel data structures, we set
@@ -198,7 +204,7 @@ i386_vm_init(void)
 	//    - the read-only version mapped at UPAGES -- kernel R, user R
 	// Your code goes here:
 
-
+    boot_map_segment(pgdir, UPAGES, ROUNDUP(npage*sizeof(struct Page), PGSIZE), PADDR(pages), PTE_U|PTE_P);
 
 	//////////////////////////////////////////////////////////////////////
 	// Map the kernel stack (symbol name "bootstack").  The complete VA
@@ -208,7 +214,7 @@ i386_vm_init(void)
 	//     * [KSTACKTOP-PTSIZE, KSTACKTOP-KSTKSIZE) -- not backed => faults
 	//     Permissions: kernel RW, user NONE
 	// Your code goes here:
-
+    boot_map_segment(pgdir, KSTACKTOP-KSTKSIZE, KSTKSIZE, PADDR(bootstack), PTE_W|PTE_P);
 	//////////////////////////////////////////////////////////////////////
 	// Map all of physical memory at KERNBASE. 
 	// Ie.  the VA range [KERNBASE, 2^32) should map to
@@ -217,7 +223,7 @@ i386_vm_init(void)
 	// we just set up the amapping anyway.
 	// Permissions: kernel RW, user NONE
 	// Your code goes here: 
-
+    boot_map_segment(pgdir, KERNBASE, 0x10000000, 0, PTE_W|PTE_P); // totally 256MB
 	// Check that the initial page directory has been set up correctly.
 	check_boot_pgdir();
 
@@ -436,6 +442,14 @@ page_init(void)
 		pages[i].pp_ref = 0;
 		LIST_INSERT_HEAD(&page_free_list, &pages[i], pp_link);
 	}
+    pages[0].pp_ref = 1; // page 0 is used 
+    LIST_REMOVE(&pages[0], pp_link);
+    int used_start = PPN(IOPHYSMEM);
+    int used_end = PPN(boot_freemem);
+    for (i = used_start; i < used_end; ++i) {
+        pages[i].pp_ref = 1;
+        LIST_REMOVE(&pages[i], pp_link);
+    }
 }
 
 //
@@ -466,8 +480,16 @@ page_initpp(struct Page *pp)
 int
 page_alloc(struct Page **pp_store)
 {
-	// Fill this function in
-	return -E_NO_MEM;
+	struct Page * first = LIST_FIRST(&page_free_list);
+    if (first == NULL) {
+        // there is no free page
+        *pp_store = NULL;
+	    return -E_NO_MEM;
+    }
+    LIST_REMOVE(first, pp_link);
+    page_initpp(first);
+    *pp_store = first;
+    return 0;
 }
 
 //
@@ -478,6 +500,13 @@ void
 page_free(struct Page *pp)
 {
 	// Fill this function in
+    if (pp->pp_ref != 0) {
+        panic("page_free: reference count of this page is not 0!");
+    }
+    else {
+        page_initpp(pp);
+        LIST_INSERT_HEAD(&page_free_list, pp, pp_link);
+    }
 }
 
 //
@@ -507,8 +536,33 @@ page_decref(struct Page* pp)
 pte_t *
 pgdir_walk(pde_t *pgdir, const void *va, int create)
 {
+    //cprintf("pgdir_walk called\n");
 	// Fill this function in
-	return NULL;
+    pte_t * pgtable = (pte_t *)pgdir[PDX(va)]; // page dir entry
+
+    pte_t * result = NULL;
+
+    if (((uint32_t)pgtable & PTE_P) == 0) {
+        // don't exist
+        if (create == 0) {
+            return NULL;
+        }
+        
+        // create
+        struct Page * pt_tmp;
+        if (page_alloc(&pt_tmp) != 0) {
+            return NULL;
+        }
+        pt_tmp->pp_ref = 1;
+        memset(page2kva(pt_tmp), 0, PGSIZE); // clear the new allocted mem
+        pgdir[PDX(va)] = page2pa(pt_tmp) | PTE_U | PTE_W | PTE_P; // see the manual
+        result = (pte_t *)page2kva(pt_tmp); // return the visual address
+    }
+    else {
+        // there exist a page table;
+        result = (pte_t *)page2kva(pa2page(PTE_ADDR(pgtable)));
+    }
+    return &(result[PTX(va)]);
 }
 
 //
@@ -519,7 +573,7 @@ pgdir_walk(pde_t *pgdir, const void *va, int create)
 // Details
 //   - If there is already a page mapped at 'va', it is page_remove()d.
 //   - If necessary, on demand, allocates a page table and inserts it into
-//     'pgdir'.
+//     'pgdir'. page_walk will do it
 //   - pp->pp_ref should be incremented if the insertion succeeds.
 //   - The TLB must be invalidated if a page was formerly present at 'va'.
 //
@@ -532,15 +586,33 @@ pgdir_walk(pde_t *pgdir, const void *va, int create)
 //
 int
 page_insert(pde_t *pgdir, struct Page *pp, void *va, int perm) 
-{
+{   
+    //cprintf("page_insert called\n");
 	// Fill this function in
-	return 0;
+    // there exist a problem if pp's la is va what will happened?
+    pte_t * pte = pgdir_walk(pgdir, va, 1);
+
+    // new page table maybe alloced by pgdir_walk
+    if (pte == NULL) {
+        return -E_NO_MEM;
+    }
+    else {
+        ++pp->pp_ref;
+        if (((*pte) & PTE_P) != 0) {
+            // the page is presented so remove
+            page_remove(pgdir, va);
+        }
+        *pte = page2pa(pp) | perm | PTE_P;
+        // ++pp->pp_ref; should be done before remove, or the page will be put into the free_list!!!
+	    return 0;  
+    }
+    
 }
 
 //
 // Map [la, la+size) of linear address space to physical [pa, pa+size)
 // in the page table rooted at pgdir.  Size is a multiple of PGSIZE.
-// Use permission bits perm|PTE_P for the entries.
+// Use permission bits perm|PTE_P for the entries. PTE_P is present 
 //
 // This function is only intended to set up the ``static'' mappings
 // above UTOP. As such, it should *not* change the pp_ref field on the
@@ -550,7 +622,23 @@ page_insert(pde_t *pgdir, struct Page *pp, void *va, int perm)
 static void
 boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, physaddr_t pa, int perm)
 {
-	// Fill this function in
+    //cprintf("boot_map_segment called\n");
+    // cause every page has 4k size, and address in one page will be maped to the same page 
+    // align
+    size = ROUNDUP(size, PGSIZE);
+    // prevent some thing wrong, though may never happen
+    uint32_t i;
+    pte_t * pte;
+    for(i = 0; i < size; i += PGSIZE) {
+        pte = pgdir_walk(pgdir, (void *)(la+i), 1);
+        // failed
+        if (pte == NULL) {
+            panic("boot_map_segment failed!");
+            return;
+        }
+
+        *pte = (pa+i) | perm | PTE_P;
+    }
 }
 
 //
@@ -566,8 +654,25 @@ boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, physaddr_t pa, int per
 struct Page *
 page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
 {
+    //cprintf("page_lookup called\n");
 	// Fill this function in
-	return NULL;
+    pte_t * pgte = pgdir_walk(pgdir, va, 0);
+    
+
+    if (pgte == NULL) {
+        return 0;
+    }
+    if (pte_store != 0) {
+        *pte_store = pgte;
+    }
+
+    if (*pgte != (pte_t)NULL) {
+        assert(PPN(*pgte) < npage);
+        return pa2page(*pgte);// this place may map into that page.
+    }
+    else {
+        return NULL;
+    }
 }
 
 //
@@ -589,6 +694,17 @@ void
 page_remove(pde_t *pgdir, void *va)
 {
 	// Fill this function in
+    //cprintf("page_remove called\n");
+    pte_t * pg_store;
+    struct Page * pg;
+    pg = page_lookup(pgdir, va, &pg_store);
+    if (pg != NULL) {
+        page_decref(pg);
+        if (pg_store != NULL) {
+            *pg_store = 0;
+        }
+        tlb_invalidate(pgdir, va);
+    }
 }
 
 //
@@ -648,7 +764,7 @@ page_check(void)
 	assert(page_insert(boot_pgdir, pp2, (void*) PGSIZE, 0) == 0);
 	assert(check_va2pa(boot_pgdir, PGSIZE) == page2pa(pp2));
 	assert(pp2->pp_ref == 1);
-
+    
 	// should be no free memory
 	assert(page_alloc(&pp) == -E_NO_MEM);
 
diff --git a/lib/printfmt.c b/lib/printfmt.c
index 6aa8cc3..7a64cdb 100644
--- a/lib/printfmt.c
+++ b/lib/printfmt.c
@@ -207,11 +207,13 @@ vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
 		// (unsigned) octal
 		case 'o':
 			// Replace this with your code.
-			putch('X', putdat);
-			putch('X', putdat);
-			putch('X', putdat);
-			break;
-
+            num = getuint(&ap, lflag);
+            if ((long long)num < 0) {
+                putch('-', putdat);
+				num = -(long long) num;
+            }
+            base = 8;
+            goto number;
 		// pointer
 		case 'p':
 			putch('0', putdat);

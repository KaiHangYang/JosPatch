diff --git a/kern/console.c b/kern/console.c
index 150fe16..e913965 100644
--- a/kern/console.c
+++ b/kern/console.c
@@ -150,7 +150,7 @@ cga_putc(int c)
 	// if no attribute given, then use black on white
 	if (!(c & ~0xFF))
 		c |= 0x0700;
-
+    // change the high bits of the 16bit char can change the display mode
 	switch (c & 0xff) {
 	case '\b':
 		if (crt_pos > 0) {
diff --git a/kern/init.c b/kern/init.c
index 7ed1510..e67efa8 100644
--- a/kern/init.c
+++ b/kern/init.c
@@ -35,11 +35,14 @@ i386_init(void)
 
 	cprintf("6828 decimal is %o octal!\n", 6828);
 
-
-
-
-
-
+    /* My Code */
+    // int x = 1, y = 3, z = 4;
+    // cprintf("x %d, y %x, z %d\n", x, y, z);
+    // unsigned int i = 0x00646c72;
+    // cprintf("H%x Wo%s", 57616, &i);
+    
+    cprintf("x=%d y=%d\n", 3);
+    /* My Code */
 
 	// Test the stack backtrace function (lab 1 only)
 	test_backtrace(5);
diff --git a/kern/monitor.c b/kern/monitor.c
index 374eae8..85723d5 100644
--- a/kern/monitor.c
+++ b/kern/monitor.c
@@ -59,6 +59,12 @@ int
 mon_backtrace(int argc, char **argv, struct Trapframe *tf)
 {
 	// Your code here.
+    uint32_t ebp = read_ebp(); //read the ebp of this func
+    cprintf("Stack backtrace:\n"); // the output mode is wrong. You can see the vcprintfmt's implementations %0.8x is wrong
+    while (ebp > 0) {
+        cprintf("ebp %08x eip %08x args %08x %08x %08x %08x %08x\n", ebp, *((uint32_t *)ebp + 1), *((uint32_t *)ebp + 2), *((uint32_t *)ebp + 3), *((uint32_t *)ebp + 4), *((uint32_t *)ebp + 5), *((uint32_t *)ebp + 6));
+        ebp = *(uint32_t *)ebp;
+    }
 	return 0;
 }
 
diff --git a/lib/printfmt.c b/lib/printfmt.c
index 6aa8cc3..7a64cdb 100644
--- a/lib/printfmt.c
+++ b/lib/printfmt.c
@@ -207,11 +207,13 @@ vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
 		// (unsigned) octal
 		case 'o':
 			// Replace this with your code.
-			putch('X', putdat);
-			putch('X', putdat);
-			putch('X', putdat);
-			break;
-
+            num = getuint(&ap, lflag);
+            if ((long long)num < 0) {
+                putch('-', putdat);
+				num = -(long long) num;
+            }
+            base = 8;
+            goto number;
 		// pointer
 		case 'p':
 			putch('0', putdat);
